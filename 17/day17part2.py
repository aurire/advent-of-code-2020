class day17:
	def __init__(self, fName):
		lines = [list(x) for x in open(fName, "r").read().splitlines()]
		y = 0
		space = {}
		for line in lines:
			x = 0
			space[y] = {}
			for dot in line:
				space[y][x] = dot
				x += 1
			y += 1
		space2 = {}
		space2[0] = space
		self.space = {}
		self.space[0] = space2
	def getPix(self, w, z, y, x):
		if w in self.space and z in self.space[w] and y in self.space[w][z] and x in self.space[w][z][y]:
			return self.space[w][z][y][x]
		return "."
	def setPix2(self, w, z, y, x, dot):
		self.toSet.append([w,z,y,x,dot])
	def setPix(self, w, z, y, x, dot):
		if w in self.space and z in self.space[w] and y in self.space[w][z] and x in self.space[w][z][y]:
			self.space[w][z][y][x] = dot
		else:
			if w not in self.space:
				self.space[w] = {}
			if z not in self.space[w]:
				self.space[w][z] = {}
			if y not in self.space[w][z]:
				self.space[w][z][y] = {}
			if x not in self.space[w][z][y]:
				self.space[w][z][y][x] = {}
			self.space[w][z][y][x] = dot
	def activeCnt(self, arr):
		cnt = 0
		for coords in arr:
			if self.getPix(coords[0], coords[1], coords[2], coords[3]) == "#":
				cnt += 1
		return cnt
	def checkFix(self, ow, oz, oy, ox):
		neigh = self.neighbCoords(ow, oz, oy, ox)
		aCnt = self.activeCnt(neigh)
		if self.getPix(ow, oz, oy, ox) == "#" and aCnt != 2 and aCnt != 3:
			self.setPix2(ow, oz, oy, ox, ".")
		elif self.getPix(ow, oz, oy, ox) == "." and aCnt == 3:
			self.setPix2(ow, oz, oy, ox, "#")
		return neigh
	def cnt(self):
		cnt = 0
		for ow in self.space:
			for oz in self.space[ow]:
				for oy in self.space[ow][oz]:
					for ox in self.space[ow][oz][oy]:
						if self.space[ow][oz][oy][ox] == "#":
							cnt += 1
		return cnt
	def run(self):
		self.toSet = []
		toCheck = {}
		for ow in self.space:
			for oz in self.space[ow]:
				for oy in self.space[ow][oz]:
					for ox in self.space[ow][oz][oy]:
						neigh = self.checkFix(ow, oz, oy, ox)
						toCheck[str(ow)+"|"+str(oz)+"|"+str(oy)+"|"+str(ox)] = 1
						for n in neigh:
							if str(n[0])+"|"+str(n[1])+"|"+str(n[2])+"|"+str(n[3]) not in toCheck:
								toCheck[str(n[0])+"|"+str(n[1])+"|"+str(n[2])+"|"+str(n[3])] = 0
		for c in toCheck:
			if toCheck[c] == 1:
				continue
			spl = c.split("|")
			self.checkFix(int(spl[0]), int(spl[1]), int(spl[2]), int(spl[3]))
		for xx in self.toSet:
			self.setPix(xx[0],xx[1],xx[2],xx[3],xx[4])
	#autogenerated
	def neighbCoords(self, w, z, y, x):
		return [
			[w-1,z-1,y-1,x-1],
			[w-1,z-1,y-1,x],
			[w-1,z-1,y-1,x+1],
			[w-1,z-1,y,x-1],
			[w-1,z-1,y,x],
			[w-1,z-1,y,x+1],
			[w-1,z-1,y+1,x-1],
			[w-1,z-1,y+1,x],
			[w-1,z-1,y+1,x+1],
			[w-1,z,y-1,x-1],
			[w-1,z,y-1,x],
			[w-1,z,y-1,x+1],
			[w-1,z,y,x-1],
			[w-1,z,y,x],
			[w-1,z,y,x+1],
			[w-1,z,y+1,x-1],
			[w-1,z,y+1,x],
			[w-1,z,y+1,x+1],
			[w-1,z+1,y-1,x-1],
			[w-1,z+1,y-1,x],
			[w-1,z+1,y-1,x+1],
			[w-1,z+1,y,x-1],
			[w-1,z+1,y,x],
			[w-1,z+1,y,x+1],
			[w-1,z+1,y+1,x-1],
			[w-1,z+1,y+1,x],
			[w-1,z+1,y+1,x+1],
			[w,z-1,y-1,x-1],
			[w,z-1,y-1,x],
			[w,z-1,y-1,x+1],
			[w,z-1,y,x-1],
			[w,z-1,y,x],
			[w,z-1,y,x+1],
			[w,z-1,y+1,x-1],
			[w,z-1,y+1,x],
			[w,z-1,y+1,x+1],
			[w,z,y-1,x-1],
			[w,z,y-1,x],
			[w,z,y-1,x+1],
			[w,z,y,x-1],
			[w,z,y,x+1],
			[w,z,y+1,x-1],
			[w,z,y+1,x],
			[w,z,y+1,x+1],
			[w,z+1,y-1,x-1],
			[w,z+1,y-1,x],
			[w,z+1,y-1,x+1],
			[w,z+1,y,x-1],
			[w,z+1,y,x],
			[w,z+1,y,x+1],
			[w,z+1,y+1,x-1],
			[w,z+1,y+1,x],
			[w,z+1,y+1,x+1],
			[w+1,z-1,y-1,x-1],
			[w+1,z-1,y-1,x],
			[w+1,z-1,y-1,x+1],
			[w+1,z-1,y,x-1],
			[w+1,z-1,y,x],
			[w+1,z-1,y,x+1],
			[w+1,z-1,y+1,x-1],
			[w+1,z-1,y+1,x],
			[w+1,z-1,y+1,x+1],
			[w+1,z,y-1,x-1],
			[w+1,z,y-1,x],
			[w+1,z,y-1,x+1],
			[w+1,z,y,x-1],
			[w+1,z,y,x],
			[w+1,z,y,x+1],
			[w+1,z,y+1,x-1],
			[w+1,z,y+1,x],
			[w+1,z,y+1,x+1],
			[w+1,z+1,y-1,x-1],
			[w+1,z+1,y-1,x],
			[w+1,z+1,y-1,x+1],
			[w+1,z+1,y,x-1],
			[w+1,z+1,y,x],
			[w+1,z+1,y,x+1],
			[w+1,z+1,y+1,x-1],
			[w+1,z+1,y+1,x],
			[w+1,z+1,y+1,x+1],
		]
	#two helper methods to generate neighbCoords
	def genNeiArr(self, arr, prefix = ""):
		lst = []
		if (len(arr) < 1):
			return [prefix]
		xx = arr.pop()
		lst.append(prefix + xx + "-1")
		lst.append(prefix + xx)
		lst.append(prefix + xx + "+1")
		newArr = []
		for lsPos in range(len(lst)):
			for xz in self.genNeiArr(arr.copy(), lst[lsPos] + ","):
				newArr.append(xz)
		return newArr
	def printNeiArr(self, arr):
		out = "return [\n"
		for x in self.genNeiArr(arr):
			if "-1" in x or "+1" in x:
				out += "[" + x[0:-1]+"],\n"
		out += "]\n"
		return out
task = day17("input.txt")
#print(task.printNeiArr(["x","y","z","w"]))
print(task.cnt())
task.run()
task.run()
task.run()
task.run()
task.run()
task.run()
print(task.cnt())
